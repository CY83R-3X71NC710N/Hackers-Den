# Simple workflow for deploying static content to GitHub Pages
name: Deploy Hackers-Den to GitHub Pages

on:
  # Only run after the Update workflow completes successfully
  workflow_run:
    workflows: ["Update Hackers Den"]
    branches: ["main"]
    types:
      - completed
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    # Only run this job if the Update workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main  # Ensure we're using the latest content from main branch
      
      - name: Verify dist directory exists
        run: |
          if [ -d "./dist" ]; then
            echo "‚úÖ Found dist directory for deployment"
            ls -la ./dist
          else
            echo "‚ùå dist directory not found! Make sure the update workflow has run successfully."
            exit 1
          fi
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload only the dist directory containing our Matrix-themed RSS feed
          path: './dist'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Verify deployment
        run: |
          echo "üöÄ Hackers-Den deployed successfully! Your site is now available at: ${{ steps.deployment.outputs.page_url }}"
          curl -s -I ${{ steps.deployment.outputs.page_url }} | grep -q "200 OK" && echo "‚úÖ Site is responding correctly" || echo "‚ùå Site verification failed"
